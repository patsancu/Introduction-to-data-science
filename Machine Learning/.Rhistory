install.packages("caret", dependencies = TRUE)
install.packages(c('reshape2','scales'))
install.packages("caret", dependencies = TRUE)
install.packages('lme4')
install.packages('Rcpp')
install.packages('Rcpp')
update.packages
update.packages()
install.packages('Rcpp')
install.packages('Rcpp')
update.packages
update.packages()
install.packages('Rcpp')
install.packages("caret", dependencies = TRUE)
install.packages('Matrix', dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("rpart", dependencies = TRUE)
install.packages("tree", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("e1071", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
library('caret')
setwd('~/Development/IntroDataScience//assignment5')
seaflow
seaflow = read.csv('seaflow_21min.csv', header = TRUE)
summary(seaflow)
createDataPartition(seaflow, p=0.5, list=TRUE, returnTrain=TRUE)
train = createDataPartition(seaflow, p=0.5)
seaflow
createDataPartition(seaflow, p=0.5, list=TRUE, returnTrain=TRUE)
createDataPartition(seaflow, p=0.5)
data(seaflow)
trainIndex <- createDataPartition(seaflow, p = .5,
list = FALSE,
times = 1)
names(seaflow)
seaflow$time
trainIndex <- createDataPartition(seaflow, p = .5,
list = FALSE,
times = 1)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
p,q = splitdf(seaflow)
p = splitdf(seaflow)
p
p$trainset
summary(p$trainset)
length(p$trainset)
length(p$testset)
length(p$testset$fsc_perp)
length(p$trainset$fsc_perp)
library(ggplot2)
ggplot(seaflow, aes(x= pe, y=chlsmall))
ggplot(seaflow, aes(x= pe, y=chlsmall) )
length(p$trainset$fsc_perp)
ggplot(seaflow, aes(x= seaflow$pe, y=seaflow$chl_small))
ggplot(seaflow, aes(x= seaflow$pe, y=seaflow$chl_small)) + geom_bar()
ggplot(seaflow, aes(x= pe, y=chl_small)) + geom_bar()
ggplot(seaflow, aes(x= pe)) + geom_bar()
ggplot(seaflow, aes(x= pe, y=chl_small, color=pop)) + geom_bar()
ggplot(seaflow, aes(x= pe, y=chl_small, color=pop)) + geom_point(size = 5)
train = p$trainset
test = p$testset
test = p$testset
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol
model <- rpart(fol, method="class", data=train)
library(rpart)
model <- rpart(fol, method="class", data=train)
response
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
library(rpart)
model <- rpart(fol, method="class", data=train)
response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
library(rpart)
model <- rpart(fol, method="class", data=train)
Seaflow ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
library(rpart)
model <- rpart(fol, method="class", data=train)
fol <- formula(Seaflow ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
library(rpart)
model <- rpart(fol, method="class", data=train)
fol <- formula(Seaflow ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
fol <- formula(seaflow ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
ggplot(seaflow, aes(x= seaflow$pe, y=seaflow$chl_small))
seaflow = read.csv('seaflow_21min.csv', header = TRUE)
fol <- formula(S ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(S, method="class", data=train)
fol <- formula(f ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(f, method="class", data=train)
model <- rpart(fol, method="class", data=train)
model <- rpart(f ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
model <- rpart(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
model
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=train)
plotcp(model)
print(model)
ggplot(seaflow, aes(x= pe, y=chl_small, color=pop)) + geom_point(size = 5)
estimate <- predict(model, test)
estimate == test
head(seaflow)
estimate$pop
estimate <- predict(model, test)
estimate
head(estimate)
test
estimate <- predict(model, train)
head(estimate)
head(test)
head(test$pop)
test$pop
head(estimate)
summary(test$pop)
prop.table(test$pop)
prop.table(table(test$pop)
)
prop.table(table(estimate)
)
estimate
head(estimate)
test$pop
summary()test$pop
summary(test$pop)
head(estimate)
summary(estimate)
fancyRpartPlot(estimate)
library(RColorBrewer)
fancyRpartPlot(estimate)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(estimate)
library(rattle)
install.packages('rattle')
library(rattle)
fancyRpartPlot(estimate)
fancyRpartPlot(model)
prediccion= data.frame(Pop = estimate)
prediccion
prediccion
estimate
estimate <- predict(model, test)
estimate <- predict(model, test, type='class')
estimate
head(stimate)
head(estimate)
estimate[1:8]
head(test$pop)
test$pop == estimate
summary(test$pop == estimate)
prop.table(test$pop = estimate)
prop.table(test$pop == estimate)
prop.table(table(test$pop == estimate))
library(randomforest)
model <- randomForest(fol, data=train)
install.packages(randomforest)
library('randomforest')
model <- randomForest(fol, data=train)
install.packages('randomforest')
install.packages('randomForest')
library('randomForest')
model <- randomForest(fol, data=train)
fancyRpartPlot(model)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
library('randomForest')
model <- randomForest(fol, data=train)
model
printcp(model)
fancyRpartPlot(model)
estimateTree <- predict(model, test,
)
estimateTree <- predict(model, test, type='class')
estimateTree
prop.table(table(estimateTree))
prop.table(table(test$pop == estimateTree))
estimateTree <- predict(model, test, type='class')
importance(model)
library('e1071')
model <- svm(fol, data=train)
estimateSVM <- predict(model, test, type='class')
prop.table(table(test$pop == estimateSVM))
table(pred = estimate, true = test$pop)
table(pred = estimate, true = test$pop)
table(pred = estimateTree, true = test$pop)
table(pred = estimateSVM, true = test$pop)
ggplot(seaflow, aes(x= pe, y=chl_small, color=pop)) + geom_point(size = 5)
summary(seaflow$pop)
summary(seaflow$time)
summary(seaflow$fsc_small)
summary(seaflow$fsc_perp)
summary(seaflow$fsc_perp)
summary(seaflow$chl_small)
plot(x=seaflow$chl_small)
plot(x=seaflow$fsc_small)
plot(x=seaflow$fsc_perp)
plot(x=seaflow$fsc_big)
plot(x=seaflow$chl_big, y=seaflow$time )
plot(x=seaflow$time, y=seaflow$chl_big )
ggplot(seaflow, aes(x=time, y=chl_big)) + geom_point(size=1)
head(seaflow)
type(seaflow)
filteredSeaflow <- seaflow[seaflow$file_id != 28]
seaflow[seaflow$file_id != 28]
seaflow[seaflow$file_id != 28, ]
filteredSeaflow <- seaflow[seaflow$file_id != 28, ]
filteredSeaflow[1:40]
filteredSeaflow[1:40]
filteredSeaflow
head(filteredSeaflow)
head(filteredSeaflow, n = 50)
filteredSeaflow[40:50]
filteredSeaflow[40,50]
filteredSeaflow[50,50]
filteredSeaflow[1,50]
filteredSeaflow[1,2]
filteredSeaflow[30]
filteredSeaflow[30,]
filteredSeaflow[31,]
head(filteredSeaflow)
filteredSeaflow[100,]
filteredSeaflow[200,]
filteredSeaflow[500,]
filteredSeaflow[600,]
filteredSeaflow[1000,]
filteredSeaflow[10000,]
filteredSeaflow[100000,]
filteredSeaflow[1000,]
filteredSeaflow[5000,]
filteredSeaflow[50000,]
seaflow[seaflow$file_id != 28, ]
seaflow[seaflow$file_id != 28, ][50,]
seaflow[seaflow$file_id != 28, ][5000,]
seaflow[seaflow$file_id != 208, ]
length(seaflow[seaflow$file_id != 208, ])
filteredSeaflow = seaflow[seaflow$file_id != 208, ])
filteredSeaflow = seaflow[seaflow$file_id != 208, ]
filteredSeaflow[50,]
filteredSeaflow[50000,]
filteredSeaflow[40000,]
filteredSeaflow[45000,]
filteredSeaflow[48000,]
filteredSeaflow[49000,]
filteredSeaflow[48500,]
filteredSeaflow[48550,]
filteredSeaflow[48575,]
filteredSeaflow[48775,]
filteredSeaflow[48800,]
filteredSeaflow[48850,]
filteredSeaflow[48875,]
filteredSeaflow[48900,]
filteredSeaflow[49900,]
filteredSeaflow[49000,]
filteredSeaflow[48990,]
filteredSeaflow[48900,]
filteredSeaflow[48950,]
filteredSeaflow[48920,]
filteredSeaflow[48940,]
filteredSeaflow[48930,]
filteredSeaflow[48925,]
filteredSeaflow[48920,]
filteredSeaflow[48921,]
filteredSeaflow[48922,]
filteredSeaflow[48923,]
filteredSeaflow[48927,]
filteredSeaflow[48924,]
filteredSeaflow[48925,]
filteredSeaflow[48925]
filteredSeaflow[48925,]
filteredSeaflow = seaflow[seaflow$file_id != 208, ])
#Repetir el proceso de la linea 17, y las predicciones
q = splitdf(seaflow)
filteredTrain = q$trainset
filteredTest = q$testset
summary(filteredTrain)
filteredSeaflow = seaflow[seaflow$file_id != 208, ]
seaflow[seaflow$file_id != 208, ]
estimateTree <- predict(modelFiltered, test, type='class')
q = splitdf(seaflow)
filteredTrain = q$trainset
filteredTest = q$testset
summary(filteredTrain)
modelFiltered <- rpart(fol, method="class", data=train)
estimateFiltered <- predict(modelFiltered, test, type='class')
prop.table(table(test$pop == estimateFiltered))
modelFiltered <- randomForest(fol, data=train)
estimateFilteredTree <- predict(modelFiltered, test, type='class')
prop.table(table(test$pop == estimateFilteredTree))
modelFiltered <- svm(fol, data=train)
estimateFilteredSVM <- predict(modelFiltered, test, type='class')
prop.table(table(test$pop == estimateFilteredSVM))
table(pred = estimateFiltered, true = test$pop)
table(pred = estimateFilteredTree, true = test$pop)
table(pred = estimateFilteredSVM, true = test$pop)
filteredSeaflow = seaflow[seaflow$file_id != 208, ]
#Repetir el proceso de la linea 17, y las predicciones
q = splitdf(seaflow)
filteredTrain = q$trainset
filteredTest = q$testset
summary(filteredTrain)
modelFiltered <- rpart(fol, method="class", data=filteredTrain)
estimateFiltered <- predict(modelFiltered, filteredTest, type='class')
prop.table(table(filteredTest$pop == estimateFiltered))
modelFiltered <- randomForest(fol, data=filteredTrain)
estimateFilteredTree <- predict(modelFiltered, filteredTest, type='class')
prop.table(table(filteredTest$pop == estimateFilteredTree))
modelFiltered <- svm(fol, data=filteredTrain)
estimateFilteredSVM <- predict(modelFiltered, filteredTest, type='class')
prop.table(table(filteredTest$pop == estimateFilteredSVM))
table(pred = estimateFiltered, true = filteredTest$pop)
table(pred = estimateFilteredTree, true = filteredTest$pop)
table(pred = estimateFilteredSVM, true = filteredTest$pop)
filteredSeaflow = seaflow[seaflow$file_id != 208, ]
q = splitdf(filteredSeaflow)
filteredTrain = q$trainset
filteredTest = q$testset
modelFiltered <- svm(fol, data=filteredTrain)
estimateFilteredSVM <- predict(modelFiltered, filteredTest, type='class')
prop.table(table(filteredTest$pop == estimateFilteredSVM))
fancyRpartPlot(model)
model <- rpart(fol, method="class", data=train)
fancyRpartPlot(model)
modelFiltered <- rpart(fol, method="class", data=filteredTrain)
fancyRpartPlot(model)
fancyRpartPlot(model)
modelFiltered <- rpart(fol, method="class", data=filteredTrain)
fancyRpartPlot(modelFiltered)
